<%@ page import="com.deuteriumlabs.dendrite.view.View"
%><%@ page import="java.util.Arrays"
%><%@ page import="java.util.List"
%><%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" 

%><!DOCTYPE html>
<html>
  <head><%
    
final String font;
if (View.isUserLoggedIn()) {
    font = View.getUserFontType();
} else {
	font = "Sans-serif";
}

%>
    <link href='http://fonts.googleapis.com/css?family=Open+Sans:300<%

if ("Serif".equals(font)) {
	
	%>|Merriweather:400,300,300italic,700,700italic<%
	
} else if ("Monospace".equals(font)) {

    %>|Source+Code+Pro:300,400,700<%

} else if ("Cursive".equals(font)) {

    %>|Kalam:400,300,700<%

} else if ("Fantasy".equals(font)) {

    %>|Almendra:400,700,400italic,700italic<%

} else {

    %>italic,600italic,300,600<%
    
}
    
%>' rel='stylesheet' type='text/css'>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta name="viewport" content="width=device-width">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <link rel="stylesheet" type="text/css" href="style.css">
    <script src="http://code.jquery.com/jquery-1.11.0.min.js"></script>
    <script type="text/javascript" src="script.js"></script>
    <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-53889088-1', 'auto');
  ga('send', 'pageview');

    </script>
    <title>${fn:escapeXml(webPageTitle)}</title>
  </head>
  <body<%
  
// Set up default display settings.
double userFontSize = 1.0;
String userFontType = "Sans-serif";
String userFontColour = "Default";
double userSpacing = 1.5;
String userAlignment = "Justify";
String userTheme = "Light";

final boolean isUserLoggedIn = View.isUserLoggedIn();

if (isUserLoggedIn == true) {

    // Replace default display settings with user preferences.
    final String authorLink = View.getAuthorLink();
    pageContext.setAttribute("authorLink", authorLink);
    final String userName = View.getMyUserName();
    pageContext.setAttribute("userName", userName);
    final String logoutLink = view.getLogoutLink();
    pageContext.setAttribute("logoutLink", logoutLink);
    userFontSize = View.getUserFontSize();
    userFontType = View.getUserFontType();
    userFontColour = View.getUserFontColour();
    userSpacing = View.getUserSpacing();
    userAlignment = View.getUserAlignment();
    userTheme = View.getUserTheme();
    pageContext.setAttribute("userTheme", userTheme);
}

if (userTheme != null && userTheme.equals("Light") == false) {
    String className = "theme";
    final String[] options = { "Light", "Dark", "Sepia", "Lovely" };
    final List<String> list = Arrays.asList(options);
    if (list.contains(userTheme)) {
        className += userTheme;
    } else {
        className += "Light";
    }
    pageContext.setAttribute("themeClassName", className);

    %> class="${fn:escapeXml(themeClassName)}"<%

} else {
    pageContext.setAttribute("themeClassName", "");
}
  
%> onLoad="init();">
    <div id="nonFooter">
      <div id="headerBar">
        <div id="header">
          <div id="logo"><a href="/"><img id="logoImage"
              alt="Dendrite"
              title="Dendrite"
              height="70px"
              src="/img/logo/2014-08-20-0/<%
          
if (userTheme != null && userTheme.equals("Light") == false) {
          
    %>${fn:escapeXml(themeClassName)}/<%
          
}
          
%>logo.png" /></a></div><%

if (isUserLoggedIn == true) {
    
    %>
          <div id="logout">Welcome back, <a href="${fn:escapeXml(authorLink)}">${fn:escapeXml(userName)}</a>.
            (<a href="${fn:escapeXml(logoutLink)}">Logout</a>)
            <a href="/notifications"><span id="notifications"<%

    final boolean areThereNewNotifications = view.areThereNewNotifications();
    if (areThereNewNotifications == false) {
    	
    	%> class="noNewNotifications"<%
    	
    }

            %> title="Notifications"><%= view.countNewNotifications() %></span></a>
          </div><%
    
} else {
    final String loginLink = view.getLoginLink();
    pageContext.setAttribute("loginLink", loginLink);
    
    %>
          <div id="login"><a
              href="${fn:escapeXml(loginLink)}">Login or register</a></div><%
    
}
    
%>
        </div>
      </div><% /* %>
      <div id="formatBar" class="format2014-08-18-0">
        <ul id="formatMenu"><%
        
final String[] formatDimensions = { "size", "type", "colour", "align",
        "spacing", "theme" };
for (final String dimension : formatDimensions) {
	
	%>
          <li>
            <img
                class="dropdownButton large"
                src="/icons/2014-08-18-0/large/<%= dimension %>.png" />
          </li>
          <li>
            <img
                class="dropdownButton small"
                src="/icons/2014-08-18-0/small/<%= dimension %>.png" />
          </li><%
	
}
        
        %>
          <li>
            <img
                class="saveButton"
                src="/icons/2014-08-18-0/save.png" />
          </li>
        </ul>
      </div><% */ %>
      <div id="formatBar">
        <div id="formatMenu"><%

final String[] formatDimensions = { "size", "type", "colour", "align",
         "spacing", "theme" };
final String[][] formatValues = {
		{ "Huge", "Large", "Medium", "Small" },
		{ "Serif", "Sans-serif", "Monospace", "Cursive", "Fantasy" },
		{ "Default", "Charcoal", "Black", "Grey", "Blue", "Green", "Red" },
		{ "Left", "Right", "Center", "Justify" },
		{ "Huge", "Large", "Medium", "Small" },
		{ "Light", "Dark", "Sepia", "Lovely" }
};
final double[] sizes = { 2.0, 1.5, 1.0, 0.8 };
final double[] spacings = { 3.0, 2.0, 1.5, 1.0 };

for (int i = 0; i < formatDimensions.length; i++) {
	final String dimension = formatDimensions[i];
    pageContext.setAttribute("dimension", dimension);
    pageContext.setAttribute("dimensionUpper", dimension.toUpperCase());
        
    %>
          <ul class="dropdown" id="${fn:escapeXml(dimension)}Dropdown"><%
          
    for (int j = 0; j < formatValues[i].length; j++) {
        final String value = formatValues[i][j];
        pageContext.setAttribute("value", value);
        
        
        %>
            <li
                id="${dimension}${value}DropdownOption" 
                onClick="pick('${dimension}','${value}');"<%
                
        boolean isSelected = 
                (dimension.equals("size") && sizes[j] == userFontSize) ||
                (dimension.equals("type") && value.equals(userFontType)) ||
                (dimension.equals("colour") && value.equals(userFontColour)) ||
                (dimension.equals("align") && value.equals(userAlignment)) ||
                (dimension.equals("spacing") && spacings[j] == userSpacing) ||
                (dimension.equals("theme") && value.equals(userTheme));
        
        if (isSelected == true) {
        	
        	%>
                class="selected"<%
        	   
        }
                
        %>>${fn:escapeXml(value)}</li><%
        
    }

%>
          </ul>
          <div class="formatIcon"
              id="${fn:escapeXml(dimension)}Button"
              onClick="clickFormatButton('${fn:escapeXml(dimension)}');">
            <img
                src="icons/${fn:escapeXml(dimension)}.png"
                title="${fn:escapeXml(dimensionUpper)}" />
            <span>${fn:escapeXml(dimensionUpper)}</span>
            <img id="arrow" src="arrow.png" />
          </div><%
          
}

%>
        </div>
      </div>
      <script type="text/javascript">showFormatBar();</script>
      <div id="main" class="modifiableText<%
      
if (userFontSize != 1.0) {
    String sizeClassName = "size";
    if (userFontSize == 2) {
        sizeClassName += "Huge";
    } else if (userFontSize == 1.5) {
        sizeClassName += "Large";
    } else if (userFontSize == 0.8) {
        sizeClassName += "Small";
    } else {
        sizeClassName += "Medium";
    }
    pageContext.setAttribute("sizeClassName", sizeClassName);
          
    %> ${fn:escapeXml(sizeClassName)}<%
          
}
    
if ("Sans-serif".equals(userFontType) == false) {
    String fontTypeClassName = "fontType";
    if ("Serif".equals(userFontType)) {
        fontTypeClassName += "Serif";
    } else if ("Monospace".equals(userFontType)) {
        fontTypeClassName += "Monospace";
    } else if ("Cursive".equals(userFontType)) {
        fontTypeClassName += "Cursive";
    } else if ("Fantasy".equals(userFontType)) {
        fontTypeClassName += "Fantasy";
    }
    pageContext.setAttribute("fontTypeClassName", fontTypeClassName);
            
    %> ${fn:escapeXml(fontTypeClassName)}<%
            
}
        
if ("Default".equals(userFontColour) == false) {
    String fontColourClassName = "fontColour";
    final String[] fontColourOptions = { "Default", "Charcoal", "Black",
            "Grey", "Blue", "Green", "Red" };
    final List<String> list = Arrays.asList(fontColourOptions);
    if (list.contains(userFontColour)) {
        fontColourClassName += userFontColour;
    } else {
        fontColourClassName += "Default";
    }
    pageContext.setAttribute("fontColourClassName", fontColourClassName);
          
    %> ${fn:escapeXml(fontColourClassName)}<%
    
    } else {
        pageContext.setAttribute("fontColourClassName", "");
    }
        
    if (userSpacing != 1.5) {
        String spacingClassName = "spacing";
        if (userSpacing == 3.0) {
            spacingClassName += "Huge";
        } else if (userSpacing == 2.0) {
            spacingClassName += "Large";
        } else if (userSpacing == 1.0) {
            spacingClassName += "Small";
        } else {
            spacingClassName += "Medium";
        }
        pageContext.setAttribute("spacingClassName", spacingClassName);
          
        %> ${fn:escapeXml(spacingClassName)}<%
            
    }
        
    if ("Justify".equals(userAlignment) == false) {
        String alignmentClassName = "alignment";
        final String[] alignmentOptions = { "Left", "Right", "Center",
                "Justify" };
        final List<String> list = Arrays.asList(alignmentOptions);
        if (list.contains(userAlignment)) {
            alignmentClassName += userAlignment;
        } else {
            alignmentClassName += "Default";
        }
        pageContext.setAttribute("alignmentClassName", alignmentClassName);
          
        %> ${fn:escapeXml(alignmentClassName)}<%
          
    }
      
    %>">