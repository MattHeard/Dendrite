<%@ page import="com.deuteriumlabs.dendrite.view.View"
%><%@ page import="java.util.Arrays"
%><%@ page import="java.util.List"
%><%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" 

%><!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta name="viewport" content="width=device-width">
    <link rel="stylesheet" type="text/css" href="style.css">
    <script src="http://code.jquery.com/jquery-1.11.0.min.js"></script>
    <script type="text/javascript" src="script.js"></script>
    <title>${fn:escapeXml(webPageTitle)}</title>
  </head>
  <body<%
  
// Set up default display settings.
double userFontSize = 1.0;
String userFontType = "Sans-serif";
String userFontColour = "Default";
double userSpacing = 1.5;
String userAlignment = "Justify";
String userTheme = "Light";

final boolean isUserLoggedIn = View.isUserLoggedIn();

if (isUserLoggedIn == true) {

    // Replace default display settings with user preferences.
    final String authorLink = View.getAuthorLink();
    pageContext.setAttribute("authorLink", authorLink);
    final String userName = View.getMyUserName();
    pageContext.setAttribute("userName", userName);
    final String logoutLink = view.getLogoutLink();
    pageContext.setAttribute("logoutLink", logoutLink);
    userFontSize = View.getUserFontSize();
    userFontType = View.getUserFontType();
    userFontColour = View.getUserFontColour();
    userSpacing = View.getUserSpacing();
    userAlignment = View.getUserAlignment();
    userTheme = View.getUserTheme();
    pageContext.setAttribute("userTheme", userTheme);
}

if (userTheme != null && userTheme.equals("Light") == false) {
    String className = "theme";
    final String[] options = { "Light", "Dark", "Sepia", "Lovely" };
    final List<String> list = Arrays.asList(options);
    if (list.contains(userTheme)) {
        className += userTheme;
    } else {
        className += "Light";
    }
    pageContext.setAttribute("themeClassName", className);

    %> class="${fn:escapeXml(themeClassName)}"<%

} else {
    pageContext.setAttribute("themeClassName", "");
}
  
%>>
    <div id="nonFooter">
      <div id="headerBar" class="${fn:escapeXml(themeClassName)}">
        <div id="header">
          <div id="logo"><a href="/" class="${fn:escapeXml(themeClassName)}"><img class="${fn:escapeXml(themeClassName)}" id="logoImage" src="logo/<%
          
if (userTheme != null && userTheme.equals("Light") == false) {
          
    %>${fn:escapeXml(themeClassName)}/<%
          
}
          
%>logo.png" /></a></div><%

if (isUserLoggedIn == true) {
    
    %>
          <div id="logout">Welcome back, <a href="${fn:escapeXml(authorLink)}" class="${fn:escapeXml(themeClassName)}">${fn:escapeXml(userName)}</a>.
            (<a href="${fn:escapeXml(logoutLink)}" class="${fn:escapeXml(themeClassName)}">Logout</a>)
          </div><%
    
} else {
    final String loginLink = view.getLoginLink();
    pageContext.setAttribute("loginLink", loginLink);
    
    %>
          <div id="login"><a
              href="${fn:escapeXml(loginLink)}"
              class="${fn:escapeXml(themeClassName)}"
              >Login or register</a></div><%
    
}
    
%>
        </div>
      </div>
      <div id="formatBar" class="${fn:escapeXml(themeClassName)}">
        <div id="formatMenu"><%

final String[] formatDimensions = { "size", "type", "colour", "align",
         "spacing", "theme" };
for (String dimension : formatDimensions) {
    pageContext.setAttribute("dimension", dimension);
    pageContext.setAttribute("dimensionUpper", dimension.toUpperCase());
        
    %>
          <div class="formatIcon"
              id="${fn:escapeXml(dimension)}Button"
              onClick="clickFormatButton('${fn:escapeXml(dimension)}');">
            <img
                src="icons/${fn:escapeXml(dimension)}.png"
                title="${fn:escapeXml(dimensionUpper)}" />
            <span>${fn:escapeXml(dimensionUpper)}</span>
            <img id="arrow" src="arrow.png" />
          </div><%
          
}

%>
        </div>
        <div id="sizePickerBar" class="formatPickerBar">
          <select id="sizePicker" onchange="pickSize(this.value);"><%
            
final String[] sizeLabels = { "Huge", "Large", "Medium", "Small" };
final double[] sizeValues = { 2.0, 1.5, 1.0, 0.8 };
for (int i = 0; i < sizeLabels.length; i++) {
    pageContext.setAttribute("label", sizeLabels[i]);
        
    %>
            <option value="${fn:escapeXml(label)}"<%
            
    if (sizeValues[i] == userFontSize) {
            
        %> selected="selected"<%
            
    }
            
    %>>${fn:escapeXml(label)}</option><%

}
            
%>
          </select>
        </div>
        <div id="typePickerBar" class="formatPickerBar">
          <select id="typePicker" onchange="pickType(this.value);"><%
          
final String[] types = { "Serif", "Sans-serif", "Monospace", "Cursive",
		"Fantasy" };
for (int i = 0; i < types.length; i++) {
	pageContext.setAttribute("type", types[i]);
	
	%>
            <option value="${fn:escapeXml(type)}"<%
            
    if (types[i].equals(userFontType)) {
    	
        %> selected="selected"<%
    	
    }
            
    %>>${fn:escapeXml(type)}</option><%
    
}
          
%>
          </select>
        </div>
        <div id="colourPickerBar" class="formatPickerBar">
          <select id="colourPicker" onchange="pickColour(this.value);"><%
          
final String[] colours = { "Default", "Charcoal", "Black", "Grey", "Blue",
        "Green", "Red" };

for (final String colour : colours) {
	pageContext.setAttribute("colour", colour);
	
	%>
            <option value="${fn:escapeXml(colour)}"<%
    
    if (colour.equals(userFontColour)) {
    
        %> selected="selected"<%
    
    }
    
    %>>${fn:escapeXml(colour)}</option><%
    
}

%>
          </select>
        </div>
        <div id="alignPickerBar" class="formatPickerBar">
          <select id="alignPicker" onchange="pickAlign(this.value);">
            <option value="left">Left</option>
            <option value="right">Right</option>
            <option value="center">Center</option>
            <option value="justify" selected="selected">Justify</option>
          </select>
        </div>
        <div id="spacingPickerBar" class="formatPickerBar">
          <select id="spacingPicker" onchange="pickSpacing(this.value);">
            <option value="3">Huge</option>
            <option value="2">Large</option>
            <option value="1.5" selected="selected">Medium</option>
            <option value="1">Small</option>
          </select>
        </div>
        <div id="themePickerBar" class="formatPickerBar">
          <select id="themePicker" onchange="pickTheme(this.value);">
            <option value="light">Light</option>
            <option value="dark">Dark</option>
            <option value="sepia">Sepia</option>
            <option value="lovely">Lovely</option>
          </select>
        </div>
      </div>
      <script type="text/javascript">showFormatBar();</script> 
      <div id="main" class="modifiableText<%
      
if (userFontSize != 1.0) {
    String sizeClassName = "size";
    if (userFontSize == 2) {
        sizeClassName += "Huge";
    } else if (userFontSize == 1.5) {
        sizeClassName += "Large";
    } else if (userFontSize == 0.8) {
        sizeClassName += "Small";
    } else {
        sizeClassName += "Medium";
    }
    pageContext.setAttribute("sizeClassName", sizeClassName);
          
    %> ${fn:escapeXml(sizeClassName)}<%
          
}
    
if ("Sans-serif".equals(userFontType) == false) {
    String fontTypeClassName = "fontType";
    if ("Serif".equals(userFontType)) {
        fontTypeClassName += "Serif";
    } else if ("Monospace".equals(userFontType)) {
        fontTypeClassName += "Monospace";
    } else if ("Cursive".equals(userFontType)) {
        fontTypeClassName += "Cursive";
    } else if ("Fantasy".equals(userFontType)) {
        fontTypeClassName += "Fantasy";
    }
    pageContext.setAttribute("fontTypeClassName", fontTypeClassName);
            
    %> ${fn:escapeXml(fontTypeClassName)}<%
            
}
        
if ("Default".equals(userFontColour) == false) {
    String fontColourClassName = "fontColour";
    final String[] fontColourOptions = { "Default", "Charcoal", "Black",
            "Grey", "Blue", "Green", "Red" };
    final List<String> list = Arrays.asList(fontColourOptions);
    if (list.contains(userFontColour)) {
        fontColourClassName += userFontColour;
    } else {
        fontColourClassName += "Default";
    }
    pageContext.setAttribute("fontColourClassName", fontColourClassName);
          
    %> ${fn:escapeXml(fontColourClassName)}<%
    
    } else {
        pageContext.setAttribute("fontColourClassName", "");
    }
        
    if (userSpacing != 1.5) {
        String spacingClassName = "spacing";
        if (userSpacing == 3.0) {
            spacingClassName += "Huge";
        } else if (userSpacing == 2.0) {
            spacingClassName += "Large";
        } else if (userSpacing == 1.0) {
            spacingClassName += "Small";
        } else {
            spacingClassName += "Medium";
        }
        pageContext.setAttribute("spacingClassName", spacingClassName);
          
        %> ${fn:escapeXml(spacingClassName)}<%
            
    }
        
    if ("Justify".equals(userAlignment) == false) {
        String alignmentClassName = "alignment";
        final String[] alignmentOptions = { "Left", "Right", "Center",
                "Justify" };
        final List<String> list = Arrays.asList(alignmentOptions);
        if (list.contains(userAlignment)) {
            alignmentClassName += userAlignment;
        } else {
            alignmentClassName += "Default";
        }
        pageContext.setAttribute("alignmentClassName", alignmentClassName);
          
        %> ${fn:escapeXml(alignmentClassName)}<%
          
    }
      
    %>">